{"version":3,"file":"static/js/243.ccf98c77.chunk.js","mappings":"4LACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCahL,EAVmB,SAACA,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,iBAAKC,UAAWC,EAAAA,OAAW,GAAKA,EAAAA,OAAhC,WACE,gBAAKC,IAAKL,EAAMK,IAAKC,IAAK,SAC1B,SAAC,KAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,WCFhC,EAJgB,SAACR,GACf,OAAO,gBAAKG,UAAWC,EAAAA,OAAhB,SAA2BJ,EAAMS,W,iDCkCpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAoB/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,wBAAlBD,EAlBL,SAACb,GACtB,OACE,kBAAMe,SAAUf,EAAMgB,aAAtB,WACE,0BACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBF,KAAK,iBACLc,YAAY,0BAGhB,0BACE,qDAUR,EArDgB,SAACtB,GACf,IAAIuB,EAAQvB,EAAMwB,YAEZC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACxC,SAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAiBN,GAAI0B,EAAE1B,GAAIG,IAAKuB,EAAEvB,KAAvBuB,EAAE1B,OAE7B2B,EAAkBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OACzC,SAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAAoBP,GAAI6B,EAAE7B,IAAZ6B,EAAE7B,OAStC,OAAKF,EAAMgC,QAGT,iBAAK7B,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SAAiCqB,KACjC,0BACE,gBAAKtB,UAAWC,EAAAA,SAAhB,SAA6ByB,OAE/B,SAACjB,EAAD,CAAqBG,SAZL,SAACkB,GACnBjC,EAAMkC,YAAYD,EAAOE,uBAGD,SAAC,KAAD,CAAU5B,GAAI,Y,0DCrBtC6B,EAA6B,SAACb,GAAD,MAAY,CAC3CS,OAAQT,EAAMc,KAAKL,SCoBrB,GAAeM,E,QAAAA,KACbC,EAAAA,EAAAA,KAjBoB,SAAChB,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAGE,SAACgB,GACxB,MAAO,CACLC,qBAAsB,SAACC,GACrBF,GAASG,EAAAA,EAAAA,IAA4BD,KAEvCR,YAAa,SAACC,GACZK,GAASI,EAAAA,EAAAA,IAAmBT,UDZF,SAACU,GAAe,IACxCC,EADuC,0IAE3C,WACE,OAAKC,KAAK/C,MAAMgC,QACT,SAACa,GAAD,UAAeE,KAAK/C,SADI,SAAC,KAAD,CAAUO,GAAI,eAHJ,GACbyC,EAAAA,WAWhC,OAJqCT,EAAAA,EAAAA,IAAQH,EAARG,CACnCO,KCQJ,CAGEG","sources":["webpack://react-first-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import React from \"react\";\nimport s from \"./../Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n  let path = \"/dialogs/\" + props.id;\n  return (\n    <div className={s.dialog + \"\" + s.active}>\n      <img src={props.src} alt={\"ava\"} />\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from \"react\";\nimport s from \"./../Dialogs.module.css\";\n\nconst Message = (props) => {\n  return <div className={s.dialog}>{props.message}</div>;\n};\n\nexport default Message;\n","import React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { Redirect } from \"react-router-dom\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\n\nconst Dialogs = (props) => {\n  let state = props.dialogsPage;\n\n  const dialogsElements = state.dialogs.map((d) => (\n    <DialogItem name={d.name} key={d.id} id={d.id} src={d.src} />\n  ));\n  const messageElements = state.messages.map((m) => (\n    <Message message={m.message} key={m.id} id={m.id} />\n  ));\n\n  // let newMessageBody = state.newMessageBody;\n\n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  if (!props.isAuth) return <Redirect to={\"/login\"} />;\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogsElements}</div>\n      <div>\n        <div className={s.messages}>{messageElements}</div>\n      </div>\n      <AddMessageFormRedux onSubmit={addNewMessage} />\n    </div>\n  );\n};\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          component={Textarea}\n          validate={[required, maxLength50]}\n          name=\"newMessageBody\"\n          placeholder=\"Enter your message\"\n        />\n      </div>\n      <div>\n        <button>Send Message</button>\n      </div>\n    </form>\n  );\n};\n\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(\n  AddMessageForm\n);\n\nexport default Dialogs;\n","import { Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\n      return <Component {...this.props} />;\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n\n  return ConnectedAuthRedirectComponent;\n};\n","import {\n  sendMessageCreator,\n  updateNewMessageBodyCreator,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    updateNewMessageBody: (body) => {\n      dispatch(updateNewMessageBodyCreator(body));\n    },\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"names":["props","path","id","className","s","src","alt","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","messageElements","messages","m","isAuth","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","updateNewMessageBody","body","updateNewMessageBodyCreator","sendMessageCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}